<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>github.com/keweishang/</title>
   
   <link>http://github.com/keweishang/</link>
   <description>The coding story begins here.</description>
   <language>en-uk</language>
   <managingEditor> Kewei Shang</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>How the compiler understands your Java class</title>
	  <link>//java-compiler-understand</link>
	  <author>Kewei Shang</author>
	  <pubDate>2016-04-07T12:18:00+02:00</pubDate>
	  <guid>//java-compiler-understand</guid>
	  <description><![CDATA[
	     <p>I have the following static factory method that creates a list view out of an int array:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListFactory</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">newInstance</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">return</span> <span class="k">new</span> <span class="n">AbstractList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
	  <span class="nd">@Override</span>
	  <span class="kd">public</span> <span class="n">Integer</span> <span class="n">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">numbers</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
	  <span class="o">}</span>
	  <span class="nd">@Override</span>
	  <span class="kd">public</span> <span class="kt">int</span> <span class="n">size</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
	  <span class="o">}</span>
	<span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>In “Effective Java”, Joshua Bloch mentioned this as an 
Adapter that allows an int array to be viewed as a list of Integer instances
However, I remember that Adapter pattern uses composition and the instance of the anonymous list implementation should therefore use the <code class="highlighter-rouge">int[]</code> as a member field. To verify the hypothesis and understand how the class is understood by the compiler, one can use the following command:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; javac -d . -XD-printflat ListFactory.java
</code></pre>
</div>

<p>From the output, one can clearly understand how the final parameter is passed to the inner anonymous class implementation:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListFactory</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="n">ListFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">List</span> <span class="n">newInstance</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">ListFactory</span><span class="err">$</span><span class="mi">1</span><span class="o">(</span><span class="n">numbers</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ListFactory</span><span class="err">$</span><span class="mi">1</span> <span class="kd">extends</span> <span class="n">AbstractList</span> <span class="o">{</span>
    <span class="cm">/*synthetic*/</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">val$numbers</span><span class="o">;</span>
    
    <span class="n">ListFactory</span><span class="err">$</span><span class="mi">1</span><span class="o">(</span><span class="cm">/*synthetic*/</span> <span class="kd">final</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">val$numbers</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">val</span><span class="n">$numbers</span> <span class="o">=</span> <span class="n">val$numbers</span><span class="o">;</span>
        <span class="kd">super</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span><span class="o">()</span>
    <span class="kd">public</span> <span class="n">Integer</span> <span class="n">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">val$numbers</span><span class="o">[</span><span class="n">index</span><span class="o">]);</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span><span class="o">()</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">size</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">val$numbers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span><span class="o">()</span>
    <span class="cm">/*synthetic*/</span> <span class="kd">public</span> <span class="n">Object</span> <span class="n">get</span><span class="o">(</span><span class="cm">/*synthetic*/</span> <span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

	  ]]></description>
	</item>

	<item>
	  <title>Caveat! JVM cannot check a generic cast at runtime</title>
	  <link>//java-jvm-no-check-generic</link>
	  <author>Kewei Shang</author>
	  <pubDate>2016-01-05T11:18:00+01:00</pubDate>
	  <guid>//java-jvm-no-check-generic</guid>
	  <description><![CDATA[
	     <p>The Java Generics is based on Erasure, which means the type check is only done at compile time, and at runtime the type information is erased.</p>

<p>The following code will throw an <code class="highlighter-rouge">ClassCastException</code>, because there is no way the JVM can check the cast at runtime.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">createList</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
  <span class="n">String</span> <span class="n">string</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">//ClassCastException here</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">string</span><span class="o">);</span>
 <span class="o">}</span>
 
 <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">createList</span><span class="o">(</span><span class="n">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">E</span> <span class="n">element</span> <span class="o">=</span> <span class="o">(</span><span class="n">E</span><span class="o">)</span><span class="n">object</span><span class="o">;</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
  <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
 <span class="o">}</span></code></pre></figure>

<p>At runtime, the <code class="highlighter-rouge">list</code> object’s type is just <code class="highlighter-rouge">List</code>. When using <strong>type parameter</strong> <code class="highlighter-rouge">E</code> to cast the <code class="highlighter-rouge">object</code>, the element’s type is just <code class="highlighter-rouge">Object</code> and it’s legal to add an <code class="highlighter-rouge">Object</code> to <code class="highlighter-rouge">List</code>. But when trying to get an element from the strings, the cast (generated by compiler) throws an <code class="highlighter-rouge">ClassCastException</code> as an <code class="highlighter-rouge">Integer</code> cannot be casted into a <code class="highlighter-rouge">String</code>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Where are variables stored in Java, Stack or Heap?</title>
	  <link>//java-where-are-local-variables</link>
	  <author>Kewei Shang</author>
	  <pubDate>2012-12-02T11:18:00+01:00</pubDate>
	  <guid>//java-where-are-local-variables</guid>
	  <description><![CDATA[
	     <p>A primitive variable “holds” directly his value itself. Examples of a primitive variable :  <code class="highlighter-rouge">int i, long l;</code></p>

<p>A reference variable “holds” the reference (4 bytes on 32-bit JVMs, 8 bytes on 64-bit JVMs) who refers to an object. Examples of a reference variable : <code class="highlighter-rouge">Student s, Date d;</code></p>

<p>local variable : a variable created in a method, the method parameter included.
instance variable : a variable that belongs to the instance of an object
class variable :  a variable that belongs to the class</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>
 <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
 <span class="n">Integer</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">;</span>
 <span class="n">Student</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Student</span><span class="o">();</span>
 <span class="n">c</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="err">“</span><span class="n">kewei</span><span class="err">”</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>
 <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">27</span><span class="o">;</span>
 <span class="n">Date</span> <span class="n">birthday</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
 <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

 <span class="kd">public</span> <span class="kt">void</span> <span class="n">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">nameParam</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">nameParam</span><span class="o">;</span>
 <span class="o">}</span>
 <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">a</code> is a primitive variable.
<code class="highlighter-rouge">b</code> is a reference variable (not object) who refers to an Integer object.
<code class="highlighter-rouge">c</code> is a reference variable (not object) who refers to a Student object.
age is a primitive variable.
birthday is a reference variable (not object) who refers to a Date object.</p>

<p>So where are all these variables stored, on the heap or on the stack? The answer is simple.</p>

<p>All local variables (primitive and reference variables) are stored on the stack. Everything else are stored on the heap.</p>

<p>All objects are stored on the heap.
All instance variables (primitive and reference variables) are stored on the heap too, since they are part of the object.
All class variables are stored on the heap too.</p>

<p>Stack is created for each individual thread. In this example, there is only one stack (the stack calls main() method). For multithread programs, there will be multiple stacks.</p>

<p>Analyze:
<code class="highlighter-rouge">a, b</code> are stored on the stack because they are local variables. <code class="highlighter-rouge">c</code> will also be stored on the stack because it is a local variable (at the same time, it is a reference variable). However, the student object that <code class="highlighter-rouge">c</code> refers to is stored on the heap. age is stored on the heap, because it is part of that student object. birthday is stored on the heap for the same reason (birthday is an instance variable, part of that student object). The date object that birthday refers to is also stored on the heap. name is also stored on the heap. nameParam is stored on the stack, because it is a local variable.</p>

	  ]]></description>
	</item>

	<item>
	  <title>How object in Java is initialized</title>
	  <link>//java-object-init</link>
	  <author>Kewei Shang</author>
	  <pubDate>2012-07-01T12:18:00+02:00</pubDate>
	  <guid>//java-object-init</guid>
	  <description><![CDATA[
	     <p>It’s important and fun to understand how exactly one object is initialized in Java.</p>

<ol>
  <li>
    <p>A class is loaded when it is used for the first time, it is loaded from the class file (Ex. Student.class). If this class has a base class, the base class will be loaded before this class.</p>
  </li>
  <li>
    <p>Next, the static initialization in the base class is performed which initialize the static fields of the base class, and then the static initialization of this (derived) class kicks in, which makes sure that the base class static members have been initialized properly in case that derived class static initialization depend on them. Static initialization takes place only once.</p>
  </li>
  <li>
    <p>Storage is allocated for this new object on the heap.</p>
  </li>
  <li>
    <p>Storage is wiped to zero, all primitive fields of the base class and the derived class are set to their default values, which is zero or false, all reference fields are set to  null.</p>
  </li>
  <li>
    <p>If there are any initialization at the definition of fields of the base class, it should take place at this point.</p>
  </li>
  <li>
    <p>Execute the constructor of the base class.</p>
  </li>
  <li>
    <p>The same steps 5 - 6 occur for the derived class.</p>
  </li>
</ol>

	  ]]></description>
	</item>


</channel>
</rss>
